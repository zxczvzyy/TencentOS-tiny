<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mqtt.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mqtt.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 28 16:56:33 2019
<BR><P>
<H3>Maximum Stack Usage =        704 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
application_entry &rArr; mqtt_demo &rArr; tos_mqtt_connect &rArr; mqtt_form_connect_packet
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[180]">port_int_disable</a>
 <LI><a href="#[181]">port_int_enable</a>
 <LI><a href="#[164]">port_cpsr_save</a>
 <LI><a href="#[163]">port_cpsr_restore</a>
 <LI><a href="#[f8]">port_sched_start</a>
 <LI><a href="#[f1]">port_context_switch</a>
 <LI><a href="#[f6]">port_irq_context_switch</a>
 <LI><a href="#[4]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">FLASH_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">FLASH_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADAC_IRQHandler</a> from n32g020xx_adc.o(i.ADAC_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[14]">DMAC_IRQHandler</a> from n32g020xx_dma.o(i.DMAC_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from n32g020xx_it.o(i.HardFault_Handler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[23]">I2C0_IRQHandler</a> from n32g020xx_i2c.o(i.I2C0_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[24]">I2C1_IRQHandler</a> from n32g020xx_i2c.o(i.I2C1_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[11]">IOM_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[a]">MESH_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[32]">NBIoT_UartRcvProtocal</a> from tos_hal_uart.o(i.NBIoT_UartRcvProtocal) referenced from tos_hal_uart.o(i.tos_hal_uart_init)
 <LI><a href="#[1]">NMI_Handler</a> from n32g020xx_it.o(i.NMI_Handler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[10]">PMU_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[25]">PWM_IRQHandler</a> from n32g020xx_pwm.o(i.PWM_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[22]">RCVCNT_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from n32g020xx_rtc.o(i.RTC_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[12]">SAC_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[18]">SCC_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[17]">SCD_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[8]">SECPAR_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[7]">SEC_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[13]">SPDMA_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[19]">SPIM0_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[1a]">SPIM1_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[1b]">SPIS0_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[1c]">SPIS1_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from n32g020xx_it.o(i.SVC_Handler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from n32g020xx_it.o(i.SysTick_Handler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_n32g020xx.o(i.SystemInit) referenced from startup_n32g020xx.o(.text)
 <LI><a href="#[b]">TIM0_IRQHandler</a> from n32g020xx_timer.o(i.TIM0_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[c]">TIM1_IRQHandler</a> from n32g020xx_timer.o(i.TIM1_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[d]">TIM2_IRQHandler</a> from n32g020xx_timer.o(i.TIM2_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[e]">TIM3_IRQHandler</a> from n32g020xx_timer.o(i.TIM3_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[f]">TIM4_IRQHandler</a> from n32g020xx_timer.o(i.TIM4_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[1d]">UART0_IRQHandler</a> from n32g020xx_uart.o(i.UART0_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[1e]">UART1_IRQHandler</a> from n32g020xx_uart.o(i.UART1_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[1f]">UART2_IRQHandler</a> from n32g020xx_uart.o(i.UART2_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[16]">UCDR_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[15]">USB_IRQHandler</a> from startup_n32g020xx.o(.text) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from n32g020xx_watchdog.o(i.WDT_IRQHandler) referenced from startup_n32g020xx.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32g020xx.o(.text)
 <LI><a href="#[2a]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[2b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[29]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[2f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[2f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[35]">application_entry</a> from main.o(i.application_entry) referenced from main.o(.constdata)
 <LI><a href="#[31]">at_parser</a> from tos_at.o(i.at_parser) referenced from tos_at.o(i.tos_at_init)
 <LI><a href="#[3d]">bc26_close</a> from bc26.o(i.bc26_close) referenced from bc26.o(.data)
 <LI><a href="#[39]">bc26_connect</a> from bc26.o(i.bc26_connect) referenced from bc26.o(.data)
 <LI><a href="#[36]">bc26_incoming_data_process</a> from bc26.o(i.bc26_incoming_data_process) referenced from bc26.o(.data)
 <LI><a href="#[37]">bc26_init</a> from bc26.o(i.bc26_init) referenced from bc26.o(.data)
 <LI><a href="#[38]">bc26_parse_domain</a> from bc26.o(i.bc26_parse_domain) referenced from bc26.o(.data)
 <LI><a href="#[3c]">bc26_recv</a> from bc26.o(i.bc26_recv) referenced from bc26.o(.data)
 <LI><a href="#[3b]">bc26_recv_timeout</a> from bc26.o(i.bc26_recv_timeout) referenced from bc26.o(.data)
 <LI><a href="#[3a]">bc26_send</a> from bc26.o(i.bc26_send) referenced from bc26.o(.data)
 <LI><a href="#[2d]">bufchar</a> from mqttpacket.o(i.bufchar) referenced from mqttpacket.o(i.MQTTPacket_decodeBuf)
 <LI><a href="#[2e]">fputc</a> from n32g020xx_log.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[2c]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[30]">knl_idle_entry</a> from tos_sys.o(i.knl_idle_entry) referenced from tos_sys.o(i.knl_idle_init)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[34]">task_exit</a> from tos_task.o(i.task_exit) referenced from tos_task.o(i.tos_task_create)
 <LI><a href="#[33]">transport_getdata</a> from transport_wrapper.o(i.transport_getdata) referenced from mqtt_wrapper.o(i.tos_mqtt_connect)
 <LI><a href="#[33]">transport_getdata</a> from transport_wrapper.o(i.transport_getdata) referenced from mqtt_wrapper.o(i.tos_mqtt_receive)
 <LI><a href="#[33]">transport_getdata</a> from transport_wrapper.o(i.transport_getdata) referenced from mqtt_wrapper.o(i.tos_mqtt_subscribe)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[55]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[17f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IOM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MESH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCVCNT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SECPAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPIS0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPIS1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UCDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g020xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[180]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[163]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[f8]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[f1]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[f6]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalcBrpAndDiv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_receive
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_buffer_copy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_form_connect_packet
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ac]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_status_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_signal_quality_check
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_connect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_band_check
</UL>

<P><STRONG><a name="[16d]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_receive
</UL>

<P><STRONG><a name="[78]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_is_echo_expect
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_event_do_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>

<P><STRONG><a name="[ae]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_is_echo_expect
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_event_do_get
</UL>

<P><STRONG><a name="[46]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_signal_quality_check
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_connect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_band_check
</UL>

<P><STRONG><a name="[48]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[187]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[188]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[47]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[29]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[56]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[21]"></a>ADAC_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, n32g020xx_adc.o(i.ADAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADAC_IRQHandler &rArr; ADAC_IRQHandlerAdc &rArr; ADC_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADAC_IRQHandlerDac
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADAC_IRQHandlerAdc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>ADAC_IRQHandlerAdc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, n32g020xx_adc.o(i.ADAC_IRQHandlerAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADAC_IRQHandlerAdc &rArr; ADC_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADAC_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>ADAC_IRQHandlerDac</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g020xx_adc.o(i.ADAC_IRQHandlerDac))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADAC_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>ADC_ReadValue</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, n32g020xx_adc.o(i.ADC_ReadValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADAC_IRQHandlerAdc
</UL>

<P><STRONG><a name="[5d]"></a>AT_UART_DataParse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, n32g020xx_it.o(i.AT_UART_DataParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = AT_UART_DataParse &rArr; tos_at_uart_write_byte &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBIoT_UartRcvProtocal
</UL>

<P><STRONG><a name="[7e]"></a>CGU_ConfigOscClock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, n32g020xx_cgu.o(i.CGU_ConfigOscClock))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[87]"></a>CGU_ConfigUartClock</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, n32g020xx_cgu.o(i.CGU_ConfigUartClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CGU_ConfigUartClock
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[85]"></a>CGU_DisableModuleFunctions</STRONG> (Thumb, 392 bytes, Stack size 12 bytes, n32g020xx_cgu.o(i.CGU_DisableModuleFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CGU_DisableModuleFunctions
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>

<P><STRONG><a name="[88]"></a>CGU_EnableModuleFunctions</STRONG> (Thumb, 632 bytes, Stack size 12 bytes, n32g020xx_cgu.o(i.CGU_EnableModuleFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CGU_EnableModuleFunctions
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f3]"></a>CGU_GetOscFrequence</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g020xx_cgu.o(i.CGU_GetOscFrequence))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[14]"></a>DMAC_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, n32g020xx_dma.o(i.DMAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMAC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g020xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, n32g020xx_i2c.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C0_IRQHandler &rArr; I2C_IRQService &rArr; I2C_SlaveInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, n32g020xx_i2c.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C1_IRQHandler &rArr; I2C_IRQService &rArr; I2C_SlaveInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C_SlaveInit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, n32g020xx_i2c.o(i.I2C_SlaveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQService
</UL>

<P><STRONG><a name="[61]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTDeserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_connect
</UL>

<P><STRONG><a name="[64]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_receive
</UL>

<P><STRONG><a name="[67]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, mqttsubscribeclient.o(i.MQTTDeserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_subscribe
</UL>

<P><STRONG><a name="[68]"></a>MQTTPacket_decode</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mqttpacket.o(i.MQTTPacket_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_read
</UL>

<P><STRONG><a name="[63]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mqttpacket.o(i.MQTTPacket_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
</UL>

<P><STRONG><a name="[6a]"></a>MQTTPacket_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_read
</UL>

<P><STRONG><a name="[6d]"></a>MQTTPacket_len</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[69]"></a>MQTTPacket_read</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, mqttpacket.o(i.MQTTPacket_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MQTTPacket_read &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_subscribe
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_receive
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_connect
</UL>

<P><STRONG><a name="[6b]"></a>MQTTSerialize_connect</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_connect
</UL>

<P><STRONG><a name="[6c]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[73]"></a>MQTTSerialize_publish</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_publish
</UL>

<P><STRONG><a name="[74]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[76]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_subscribe
</UL>

<P><STRONG><a name="[77]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[72]"></a>MQTTstrlen</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[32]"></a>NBIoT_UartRcvProtocal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_hal_uart.o(i.NBIoT_UartRcvProtocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = NBIoT_UartRcvProtocal &rArr; AT_UART_DataParse &rArr; tos_at_uart_write_byte &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_UART_DataParse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_hal_uart.o(i.tos_hal_uart_init)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, n32g020xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NMI_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, n32g020xx_pwm.o(i.PWM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, n32g020xx_rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g020xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g020xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, system_n32g020xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigOscClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>TIM0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, n32g020xx_timer.o(i.TIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM0_IRQHandler &rArr; TIMER_IrqDeal &rArr; TIMER_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IrqDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIM1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, n32g020xx_timer.o(i.TIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM1_IRQHandler &rArr; TIMER_IrqDeal &rArr; TIMER_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IrqDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, n32g020xx_timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM2_IRQHandler &rArr; TIMER_IrqDeal &rArr; TIMER_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IrqDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, n32g020xx_timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM3_IRQHandler &rArr; TIMER_IrqDeal &rArr; TIMER_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IrqDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, n32g020xx_timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM4_IRQHandler &rArr; TIMER_IrqDeal &rArr; TIMER_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IrqDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIMER_GetCountValue</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, n32g020xx_timer.o(i.TIMER_GetCountValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_GetCountValue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IrqDeal
</UL>

<P><STRONG><a name="[7f]"></a>TIMER_IrqDeal</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, n32g020xx_timer.o(i.TIMER_IrqDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIMER_IrqDeal &rArr; TIMER_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCountValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[1d]"></a>UART0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, n32g020xx_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_IRQHandler &rArr; UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, n32g020xx_uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1_IRQHandler &rArr; UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, n32g020xx_uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_IRQHandler &rArr; UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>UART_Close</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, n32g020xx_uart.o(i.UART_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Close &rArr; CGU_DisableModuleFunctions
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_DisableModuleFunctions
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_deinit
</UL>

<P><STRONG><a name="[86]"></a>UART_Init</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, n32g020xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART_Init &rArr; UART_CalcBrpAndDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableModuleFunctions
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigUartClock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InitIOM
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalcBrpAndDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
</UL>

<P><STRONG><a name="[fb]"></a>UART_SendData</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, n32g020xx_uart.o(i.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_write
</UL>

<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g020xx_watchdog.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g020xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[79]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_parse_domain
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_connect
</UL>

<P><STRONG><a name="[18d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[18e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[8c]"></a>__0snprintf</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18f]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[10e]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
</UL>

<P><STRONG><a name="[190]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[191]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[8d]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[192]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[193]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[194]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[a3]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>

<P><STRONG><a name="[4f]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[167]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_time.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
</UL>

<P><STRONG><a name="[195]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[196]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[197]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[35]"></a>application_entry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.application_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = application_entry &rArr; mqtt_demo &rArr; tos_mqtt_connect &rArr; mqtt_form_connect_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>at_delay</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_at_utils.o(i.at_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = at_delay &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay_ms
</UL>

<P><STRONG><a name="[a8]"></a>at_delay_ms</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tos_at_utils.o(i.at_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = at_delay_ms &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_sal_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_incoming_data_process
</UL>

<P><STRONG><a name="[b5]"></a>at_timer_countdown</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_at_utils.o(i.at_timer_countdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = at_timer_countdown &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[159]"></a>at_timer_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_at_utils.o(i.at_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[b6]"></a>at_timer_is_expired</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_at_utils.o(i.at_timer_is_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = at_timer_is_expired &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_remain
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[b7]"></a>at_timer_remain</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_at_utils.o(i.at_timer_remain))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = at_timer_remain &rArr; at_timer_is_expired &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[ce]"></a>bc26_sal_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bc26.o(i.bc26_sal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = bc26_sal_init &rArr; tos_at_init &rArr; at_recv_cache_init &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay_ms
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_register
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
</UL>

<P><STRONG><a name="[2d]"></a>bufchar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqttpacket.o(i.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(i.MQTTPacket_decodeBuf)
</UL>
<P><STRONG><a name="[f0]"></a>cpu_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[f2]"></a>cpu_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_cpu.o(i.cpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cpu_init &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetOscFrequence
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[f5]"></a>cpu_irq_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_irq_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[f7]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_sched_start))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[f4]"></a>cpu_systick_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[174]"></a>cpu_task_stk_init</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, tos_cpu.o(i.cpu_task_stk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[2e]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, n32g020xx_log.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[fc]"></a>knl_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_sys.o(i.knl_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[13c]"></a>knl_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[ff]"></a>knl_is_inirq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_inirq))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[100]"></a>knl_is_sched_locked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_sched_locked))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[103]"></a>knl_is_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_self))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[fe]"></a>knl_sched</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tos_sys.o(i.knl_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[105]"></a>log_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, n32g020xx_log.o(i.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = log_init &rArr; UART_Init &rArr; UART_CalcBrpAndDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = main &rArr; log_init &rArr; UART_Init &rArr; UART_CalcBrpAndDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[109]"></a>mmheap_init_with_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_mmheap.o(i.mmheap_init_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[99]"></a>mqtt_demo</STRONG> (Thumb, 252 bytes, Stack size 184 bytes, main.o(i.mqtt_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = mqtt_demo &rArr; tos_mqtt_connect &rArr; mqtt_form_connect_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_subscribe
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_receive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_publish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_connect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_sal_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[116]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[111]"></a>osDelay</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osDelay &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
</UL>

<P><STRONG><a name="[106]"></a>osKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; tos_knl_init &rArr; knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>osKernelStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>osThreadCreate</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_cmsis2knl
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_pend.o(i.pend_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[170]"></a>pend_highest_pending_task_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_pend.o(i.pend_highest_pending_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[11f]"></a>pend_is_nopending</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(i.pend_is_nopending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_is_nopending
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[120]"></a>pend_list_adjust</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_adjust &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[123]"></a>pend_list_remove</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[124]"></a>pend_object_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_pend.o(i.pend_object_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_object_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[126]"></a>pend_object_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tos_pend.o(i.pend_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[16f]"></a>pend_state2errno</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tos_pend.o(i.pend_state2errno))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[127]"></a>pend_task_block</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tos_pend.o(i.pend_task_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[12a]"></a>pend_task_wakeup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[12d]"></a>pend_wakeup</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_pend.o(i.pend_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[117]"></a>pend_wakeup_all</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tos_pend.o(i.pend_wakeup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[12e]"></a>pend_wakeup_one</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_pend.o(i.pend_wakeup_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_one &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[fa]"></a>port_systick_config</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, port_c.o(i.port_systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[f9]"></a>port_systick_priority_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port_c.o(i.port_systick_priority_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_systick_priority_set &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[62]"></a>readChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqttpacket.o(i.readChar))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
</UL>

<P><STRONG><a name="[66]"></a>readInt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mqttpacket.o(i.readInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[65]"></a>readMQTTLenString</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, mqttpacket.o(i.readMQTTLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = readMQTTLenString &rArr; readInt
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[12c]"></a>readyqueue_add</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_sched.o(i.readyqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[131]"></a>readyqueue_add_head</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tos_sched.o(i.readyqueue_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[130]"></a>readyqueue_add_tail</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
</UL>

<P><STRONG><a name="[136]"></a>readyqueue_first_task_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_first_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readyqueue_first_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[102]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_highest_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[165]"></a>readyqueue_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[13d]"></a>readyqueue_is_prio_onlyone</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_sched.o(i.readyqueue_is_prio_onlyone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readyqueue_is_prio_onlyone
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[137]"></a>readyqueue_move_head_to_tail</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_move_head_to_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_move_head_to_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[128]"></a>readyqueue_remove</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[13b]"></a>robin_sched</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, tos_robin.o(i.robin_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = robin_sched &rArr; readyqueue_move_head_to_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_is_prio_onlyone
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[129]"></a>tick_list_add</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tos_tick.o(i.tick_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[12b]"></a>tick_list_remove</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tos_tick.o(i.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[14b]"></a>tick_update</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tos_tick.o(i.tick_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[166]"></a>timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[14e]"></a>timer_update</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tos_timer.o(i.timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = timer_update &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[c1]"></a>tos_at_channel_alloc_id</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tos_at.o(i.tos_at_channel_alloc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tos_at_channel_alloc_id &rArr; at_channel_construct &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_connect
</UL>

<P><STRONG><a name="[c0]"></a>tos_at_channel_free</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tos_at.o(i.tos_at_channel_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tos_at_channel_free &rArr; tos_mutex_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_connect
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_close
</UL>

<P><STRONG><a name="[cd]"></a>tos_at_channel_read_timed</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, tos_at.o(i.tos_at_channel_read_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tos_at_channel_read_timed &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_remain
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_is_expired
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_countdown
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_recv_timeout
</UL>

<P><STRONG><a name="[c6]"></a>tos_at_channel_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tos_at.o(i.tos_at_channel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tos_at_channel_write &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_incoming_data_process
</UL>

<P><STRONG><a name="[be]"></a>tos_at_cmd_exec</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, tos_at.o(i.tos_at_cmd_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_attach
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_signal_quality_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_set_band
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_send
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_psm_lock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_open_err_code
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_open_cfun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_incoming_data_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_get_net
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_echo_close
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_connect
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_close
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_check_sim
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_band_check
</UL>

<P><STRONG><a name="[bd]"></a>tos_at_echo_create</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tos_at.o(i.tos_at_echo_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_at_echo_create
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_signal_quality_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_set_band
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_send
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_psm_lock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_open_err_code
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_open_cfun
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_get_net
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_echo_close
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_connect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_check_sim
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_band_check
</UL>

<P><STRONG><a name="[d2]"></a>tos_at_global_lock_pend</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_at.o(i.tos_at_global_lock_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tos_at_global_lock_pend &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_send
</UL>

<P><STRONG><a name="[d4]"></a>tos_at_global_lock_post</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_at.o(i.tos_at_global_lock_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_at_global_lock_post &rArr; tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_send
</UL>

<P><STRONG><a name="[cf]"></a>tos_at_init</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, tos_at.o(i.tos_at_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tos_at_init &rArr; at_recv_cache_init &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_deinit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_event_table_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_deinit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_sal_init
</UL>

<P><STRONG><a name="[c4]"></a>tos_at_uart_read</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tos_at.o(i.tos_at_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tos_at_uart_read &rArr; at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_incoming_data_process
</UL>

<P><STRONG><a name="[c5]"></a>tos_at_uart_readline</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tos_at.o(i.tos_at_uart_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tos_at_uart_readline &rArr; at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_incoming_data_process
</UL>

<P><STRONG><a name="[5e]"></a>tos_at_uart_write_byte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tos_at.o(i.tos_at_uart_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_at_uart_write_byte &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_UART_DataParse
</UL>

<P><STRONG><a name="[9d]"></a>tos_chr_fifo_create</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tos_char_fifo.o(i.tos_chr_fifo_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tos_chr_fifo_create &rArr; tos_ring_q_create
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[153]"></a>tos_chr_fifo_destroy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_char_fifo.o(i.tos_chr_fifo_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_chr_fifo_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>

<P><STRONG><a name="[ba]"></a>tos_chr_fifo_pop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_char_fifo.o(i.tos_chr_fifo_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_pop &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>

<P><STRONG><a name="[155]"></a>tos_chr_fifo_pop_stream</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, tos_char_fifo.o(i.tos_chr_fifo_pop_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_pop_stream &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[15e]"></a>tos_chr_fifo_push</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tos_char_fifo.o(i.tos_chr_fifo_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_push &rArr; tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_write_byte
</UL>

<P><STRONG><a name="[156]"></a>tos_chr_fifo_push_stream</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, tos_char_fifo.o(i.tos_chr_fifo_push_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_push_stream &rArr; tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
</UL>

<P><STRONG><a name="[13a]"></a>tos_cpu_clz</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tos_cpu.o(i.tos_cpu_clz))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>

<P><STRONG><a name="[104]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[101]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[15c]"></a>tos_hal_uart_deinit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_hal_uart.o(i.tos_hal_uart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tos_hal_uart_deinit &rArr; UART_Close &rArr; CGU_DisableModuleFunctions
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[15b]"></a>tos_hal_uart_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tos_hal_uart.o(i.tos_hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = tos_hal_uart_init &rArr; UART_Init &rArr; UART_CalcBrpAndDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[bb]"></a>tos_hal_uart_write</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, tos_hal_uart.o(i.tos_hal_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tos_hal_uart_write &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
</UL>

<P><STRONG><a name="[11a]"></a>tos_knl_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[7b]"></a>tos_knl_irq_enter</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, tos_sys.o(i.tos_knl_irq_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7d]"></a>tos_knl_irq_leave</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_irq_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7a]"></a>tos_knl_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[14f]"></a>tos_knl_sched_lock</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[150]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[11b]"></a>tos_knl_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[a9]"></a>tos_millisec2tick</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_time.o(i.tos_millisec2tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tos_millisec2tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay_ms
</UL>

<P><STRONG><a name="[9b]"></a>tos_mmheap_alloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[d3]"></a>tos_mmheap_calloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_send
</UL>

<P><STRONG><a name="[9e]"></a>tos_mmheap_free</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_deinit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_send
</UL>

<P><STRONG><a name="[10b]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tos_mmheap.o(i.tos_mmheap_pool_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[10c]"></a>tos_mqtt_connect</STRONG> (Thumb, 144 bytes, Stack size 416 bytes, mqtt_wrapper.o(i.tos_mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tos_mqtt_connect &rArr; mqtt_form_connect_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_sendPacketBuffer
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_open
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_close
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_form_connect_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
</UL>

<P><STRONG><a name="[10f]"></a>tos_mqtt_publish</STRONG> (Thumb, 94 bytes, Stack size 256 bytes, mqtt_wrapper.o(i.tos_mqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tos_mqtt_publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_sendPacketBuffer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
</UL>

<P><STRONG><a name="[110]"></a>tos_mqtt_receive</STRONG> (Thumb, 148 bytes, Stack size 296 bytes, mqtt_wrapper.o(i.tos_mqtt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tos_mqtt_receive &rArr; MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
</UL>

<P><STRONG><a name="[10d]"></a>tos_mqtt_subscribe</STRONG> (Thumb, 128 bytes, Stack size 256 bytes, mqtt_wrapper.o(i.tos_mqtt_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tos_mqtt_subscribe &rArr; MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_sendPacketBuffer
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_demo
</UL>

<P><STRONG><a name="[9c]"></a>tos_mutex_create</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tos_mutex.o(i.tos_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_mutex_create &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[152]"></a>tos_mutex_destroy</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tos_mutex.o(i.tos_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mutex_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>

<P><STRONG><a name="[a2]"></a>tos_mutex_pend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_mutex.o(i.tos_mutex_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_pend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
</UL>

<P><STRONG><a name="[154]"></a>tos_mutex_pend_timed</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, tos_mutex.o(i.tos_mutex_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[a5]"></a>tos_mutex_post</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, tos_mutex.o(i.tos_mutex_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_task_get
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_post
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[15f]"></a>tos_ring_q_create</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tos_ring_queue.o(i.tos_ring_q_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
</UL>

<P><STRONG><a name="[161]"></a>tos_ring_q_dequeue</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tos_ring_queue.o(i.tos_ring_q_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
</UL>

<P><STRONG><a name="[160]"></a>tos_ring_q_destroy</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tos_ring_queue.o(i.tos_ring_q_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
</UL>

<P><STRONG><a name="[162]"></a>tos_ring_q_enqueue</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tos_ring_queue.o(i.tos_ring_q_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
</UL>

<P><STRONG><a name="[171]"></a>tos_ring_q_is_empty</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tos_ring_queue.o(i.tos_ring_q_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>

<P><STRONG><a name="[172]"></a>tos_ring_q_is_full</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tos_ring_queue.o(i.tos_ring_q_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>

<P><STRONG><a name="[176]"></a>tos_sal_module_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sal_module_wrapper.o(i.tos_sal_module_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_sal_module_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_close
</UL>

<P><STRONG><a name="[178]"></a>tos_sal_module_connect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sal_module_wrapper.o(i.tos_sal_module_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_sal_module_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_open
</UL>

<P><STRONG><a name="[d1]"></a>tos_sal_module_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sal_module_wrapper.o(i.tos_sal_module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_sal_module_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_sal_init
</UL>

<P><STRONG><a name="[177]"></a>tos_sal_module_recv</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sal_module_wrapper.o(i.tos_sal_module_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_sal_module_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_getdata
</UL>

<P><STRONG><a name="[d0]"></a>tos_sal_module_register</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sal_module_wrapper.o(i.tos_sal_module_register))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_sal_init
</UL>

<P><STRONG><a name="[179]"></a>tos_sal_module_send</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sal_module_wrapper.o(i.tos_sal_module_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_sal_module_send
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_sendPacketBuffer
</UL>

<P><STRONG><a name="[15a]"></a>tos_sem_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_sem.o(i.tos_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tos_sem_create &rArr; tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[173]"></a>tos_sem_create_max</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_sem.o(i.tos_sem_create_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>

<P><STRONG><a name="[15d]"></a>tos_sem_destroy</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tos_sem.o(i.tos_sem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_sem_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[b9]"></a>tos_sem_pend</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tos_sem.o(i.tos_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>

<P><STRONG><a name="[b2]"></a>tos_sem_post</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_sem.o(i.tos_sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_write_byte
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[a7]"></a>tos_systick_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_time.o(i.tos_systick_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_remain
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_is_expired
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_countdown
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay
</UL>

<P><STRONG><a name="[fd]"></a>tos_task_create</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, tos_task.o(i.tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[118]"></a>tos_task_delay</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tos_task.o(i.tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>

<P><STRONG><a name="[145]"></a>tos_task_destroy</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[115]"></a>tos_task_prio_change</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, tos_task.o(i.tos_task_prio_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[175]"></a>tos_task_yield</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_task_yield &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[7c]"></a>tos_tick_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tos_tick.o(i.tos_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[16c]"></a>transport_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, transport_wrapper.o(i.transport_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = transport_close &rArr; tos_sal_module_close
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_close
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_connect
</UL>

<P><STRONG><a name="[33]"></a>transport_getdata</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, transport_wrapper.o(i.transport_getdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transport_getdata &rArr; tos_sal_module_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_recv
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mqtt_wrapper.o(i.tos_mqtt_connect)
<LI> mqtt_wrapper.o(i.tos_mqtt_receive)
<LI> mqtt_wrapper.o(i.tos_mqtt_subscribe)
</UL>
<P><STRONG><a name="[16a]"></a>transport_open</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, transport_wrapper.o(i.transport_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transport_open &rArr; tos_sal_module_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_connect
</UL>

<P><STRONG><a name="[16b]"></a>transport_sendPacketBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, transport_wrapper.o(i.transport_sendPacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transport_sendPacketBuffer &rArr; tos_sal_module_send
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_subscribe
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_publish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_connect
</UL>

<P><STRONG><a name="[6f]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[6e]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[70]"></a>writeInt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[71]"></a>writeMQTTString</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>I2C_IRQService</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, n32g020xx_i2c.o(i.I2C_IRQService))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IRQService &rArr; I2C_SlaveInit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>UART_CalcBrpAndDiv</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, n32g020xx_uart.o(i.UART_CalcBrpAndDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_CalcBrpAndDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[81]"></a>UART_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, n32g020xx_uart.o(i.UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>UART_InitIOM</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, n32g020xx_uart.o(i.UART_InitIOM))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[90]"></a>__ffs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mmheap.o(i.__ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>

<P><STRONG><a name="[92]"></a>__fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(i.__fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[168]"></a>adjust_request_size</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tos_mmheap.o(i.adjust_request_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[d5]"></a>blk_absorb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_absorb &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[d8]"></a>blk_can_split</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_can_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blk_can_split
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[d9]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[d7]"></a>blk_link_next</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[dd]"></a>blk_locate_free</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = blk_locate_free &rArr; mapping_search &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[e1]"></a>blk_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[e4]"></a>blk_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_mark_as_used &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[e7]"></a>blk_merge_next</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[e9]"></a>blk_merge_prev</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_merge_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[dc]"></a>blk_next</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[ec]"></a>blk_prepare_used</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[e8]"></a>blk_remove</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = blk_remove &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[df]"></a>blk_search_suitable</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tos_mmheap.o(i.blk_search_suitable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_search_suitable &rArr; __ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[e3]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_free))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[e2]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[e5]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_used))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[ef]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[e6]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_used))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[d6]"></a>blk_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_size))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[ee]"></a>blk_split</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[ea]"></a>blk_to_ptr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[ed]"></a>blk_trim_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_trim_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[91]"></a>generic_fls</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tos_mmheap.o(i.generic_fls))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>

<P><STRONG><a name="[db]"></a>insert_free_block</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_mmheap.o(i.insert_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[da]"></a>mapping_insert</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, tos_mmheap.o(i.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[de]"></a>mapping_search</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tos_mmheap.o(i.mapping_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mapping_search &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[10a]"></a>mmheap_ctl_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tos_mmheap.o(i.mmheap_ctl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[169]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_pool_is_exist))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[eb]"></a>offset_to_block</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(i.offset_to_block))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[e0]"></a>remove_free_block</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, tos_mmheap.o(i.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[16e]"></a>mutex_fresh_owner_mark</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tos_mutex.o(i.mutex_fresh_owner_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutex_fresh_owner_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[114]"></a>mutex_old_owner_release</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_mutex.o(i.mutex_old_owner_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[122]"></a>pend_list_add</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tos_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[121]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[11e]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>

<P><STRONG><a name="[125]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
</UL>

<P><STRONG><a name="[134]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(i._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[138]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(i._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[139]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_prio_highest_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[133]"></a>readyqueue_prio_mark</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_prio_mark))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[135]"></a>tos_list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_sched.o(i.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
</UL>

<P><STRONG><a name="[132]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sched.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[13e]"></a>sem_do_post</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tos_sem.o(i.sem_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>

<P><STRONG><a name="[30]"></a>knl_idle_entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(i.knl_idle_entry))
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(i.knl_idle_init)
</UL>
<P><STRONG><a name="[13f]"></a>task_do_destroy</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tos_task.o(i.task_do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[34]"></a>task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(i.task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(i.tos_task_create)
</UL>
<P><STRONG><a name="[146]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tos_task.o(i.task_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[141]"></a>task_mutex_release</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_task.o(i.task_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[144]"></a>task_reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tos_task.o(i.task_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[143]"></a>task_state_is_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_task.o(i.task_state_is_pending))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[142]"></a>task_state_is_ready</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.task_state_is_ready))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[140]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[147]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[148]"></a>tick_task_place</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, tos_tick.o(i.tick_task_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[149]"></a>tick_task_takeoff</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tos_tick.o(i.tick_task_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[14a]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_tick.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[14c]"></a>timer_place</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tos_timer.o(i.timer_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[14d]"></a>timer_takeoff</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tos_timer.o(i.timer_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[12f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, port_c.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[119]"></a>errno_knl2cmsis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.errno_knl2cmsis))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[11c]"></a>priority_cmsis2knl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os.o(i.priority_cmsis2knl))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[8f]"></a>__ascii2hex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bc26.o(i.__ascii2hex))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asciistr2hex
</UL>

<P><STRONG><a name="[8e]"></a>__asciistr2hex</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, bc26.o(i.__asciistr2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __asciistr2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ascii2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_incoming_data_process
</UL>

<P><STRONG><a name="[93]"></a>__hex2str</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bc26.o(i.__hex2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hex2str
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__num2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_send
</UL>

<P><STRONG><a name="[94]"></a>__num2hex</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bc26.o(i.__num2hex))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hex2str
</UL>

<P><STRONG><a name="[bc]"></a>bc26_band_check</STRONG> (Thumb, 80 bytes, Stack size 88 bytes, bc26.o(i.bc26_band_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = bc26_band_check &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[bf]"></a>bc26_check_sim</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, bc26.o(i.bc26_check_sim))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = bc26_check_sim &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[3d]"></a>bc26_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bc26.o(i.bc26_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = bc26_close &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc26.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>bc26_connect</STRONG> (Thumb, 180 bytes, Stack size 120 bytes, bc26.o(i.bc26_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = bc26_connect &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_alloc_id
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc26.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>bc26_echo_close</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, bc26.o(i.bc26_echo_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = bc26_echo_close &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[c3]"></a>bc26_get_net</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, bc26.o(i.bc26_get_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = bc26_get_net &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[36]"></a>bc26_incoming_data_process</STRONG> (Thumb, 602 bytes, Stack size 64 bytes, bc26.o(i.bc26_incoming_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = bc26_incoming_data_process &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_readline
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay_ms
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asciistr2hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc26.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>bc26_init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, bc26.o(i.bc26_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = bc26_init &rArr; bc26_signal_quality_check &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay_ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_signal_quality_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_set_band
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_psm_lock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_open_err_code
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_open_cfun
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_get_net
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_echo_close
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_check_sim
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_band_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc26.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>bc26_open_cfun</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, bc26.o(i.bc26_open_cfun))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = bc26_open_cfun &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[ca]"></a>bc26_open_err_code</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, bc26.o(i.bc26_open_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = bc26_open_err_code &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[38]"></a>bc26_parse_domain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bc26.o(i.bc26_parse_domain))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bc26_parse_domain &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc26.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>bc26_psm_lock</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, bc26.o(i.bc26_psm_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = bc26_psm_lock &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[3c]"></a>bc26_recv</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bc26.o(i.bc26_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = bc26_recv &rArr; bc26_recv_timeout &rArr; tos_at_channel_read_timed &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_recv_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc26.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>bc26_recv_timeout</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bc26.o(i.bc26_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = bc26_recv_timeout &rArr; tos_at_channel_read_timed &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc26.o(.data)
</UL>
<P><STRONG><a name="[c7]"></a>bc26_reset</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, bc26.o(i.bc26_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = bc26_reset &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[3a]"></a>bc26_send</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, bc26.o(i.bc26_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = bc26_send &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_post
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_pend
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hex2str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc26.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>bc26_set_band</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, bc26.o(i.bc26_set_band))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = bc26_set_band &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[cc]"></a>bc26_signal_quality_check</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, bc26.o(i.bc26_signal_quality_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = bc26_signal_quality_check &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc26_init
</UL>

<P><STRONG><a name="[9a]"></a>at_channel_construct</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tos_at.o(i.at_channel_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = at_channel_construct &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_alloc_id
</UL>

<P><STRONG><a name="[151]"></a>at_channel_get</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tos_at.o(i.at_channel_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_alloc_id
</UL>

<P><STRONG><a name="[9f]"></a>at_channel_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tos_at.o(i.at_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[a1]"></a>at_cmd_do_exec</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tos_at.o(i.at_cmd_do_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>

<P><STRONG><a name="[157]"></a>at_echo_attach</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_at.o(i.at_echo_attach))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>

<P><STRONG><a name="[aa]"></a>at_echo_buffer_copy</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tos_at.o(i.at_echo_buffer_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_echo_buffer_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[ab]"></a>at_echo_status_set</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tos_at.o(i.at_echo_status_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = at_echo_status_set &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[ad]"></a>at_event_do_get</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, tos_at.o(i.at_event_do_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = at_event_do_get &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
</UL>

<P><STRONG><a name="[158]"></a>at_event_table_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_at.o(i.at_event_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[af]"></a>at_get_event</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_at.o(i.at_get_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = at_get_event &rArr; at_event_do_get &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_event_do_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[b0]"></a>at_is_echo_expect</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, tos_at.o(i.at_is_echo_expect))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = at_is_echo_expect &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
</UL>

<P><STRONG><a name="[31]"></a>at_parser</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, tos_at.o(i.at_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = at_parser &rArr; at_uart_line_parse &rArr; at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_status_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_buffer_copy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_at.o(i.tos_at_init)
</UL>
<P><STRONG><a name="[b3]"></a>at_recv_cache_deinit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tos_at.o(i.at_recv_cache_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_recv_cache_deinit &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[b4]"></a>at_recv_cache_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tos_at.o(i.at_recv_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = at_recv_cache_init &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[b8]"></a>at_uart_getchar</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tos_at.o(i.at_uart_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_readline
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_read
</UL>

<P><STRONG><a name="[b1]"></a>at_uart_line_parse</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tos_at.o(i.at_uart_line_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = at_uart_line_parse &rArr; at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_is_echo_expect
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[a4]"></a>at_uart_send</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tos_at.o(i.at_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>

<P><STRONG><a name="[112]"></a>mqtt_form_connect_packet</STRONG> (Thumb, 54 bytes, Stack size 104 bytes, mqtt_wrapper.o(i.mqtt_form_connect_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mqtt_form_connect_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mqtt_connect
</UL>

<P><STRONG><a name="[95]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[98]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[97]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[2b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[57]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[59]"></a>_scanf_string</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
